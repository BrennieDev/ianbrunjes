[
  {
    "path": "posts/2021-03-06-lake-viz/",
    "title": "Data visualization for Mono Lake Levels, CA",
    "description": "Visualizing water levels of Mono Lake, Lee Vining, California and impacting events. (1850-2017)",
    "author": [
      {
        "name": "Ian Brunjes",
        "url": {}
      }
    ],
    "date": "2021-03-06",
    "categories": [],
    "contents": "\r\n\r\n\r\nShow code\r\n\r\n# Packages used\r\nlibrary(tidyverse)\r\nlibrary(here)\r\nlibrary(janitor)\r\n\r\n# Read in and tidy the data from data/mono_lake_annual_levels.csv\r\nannual_lake_levels <- read_csv(here(\"data\", \"mono_lake_annual_levels.csv\"), skip = 5, col_names = TRUE) %>% \r\n  clean_names() %>% \r\n  rename(lake_level = lake_level_feet_above_sea_level) %>% \r\n  select(year, lake_level)\r\n\r\n# *insert beautiful plot here*\r\nggplot(data = annual_lake_levels, aes(x = year, y = lake_level)) +\r\n  geom_line(size = 1) +\r\n  # Horizontal line indicating Decision 1631 water level\r\n  geom_hline(aes(yintercept = 6392, color = \"blue\"), size = .7, linetype = \"dashed\") +\r\n  # Horizontal line indicating land bridge formation\r\n  geom_hline(aes(yintercept = 6377, color = \"red\"), size = .7, linetype = \"dashed\") +\r\n  # Annotation for 1941 DWP Diversions Begin\r\n  annotate(geom=\"point\", x = 1941, y = 6417, size = 5, color = \"orange\", alpha = 0.5) +\r\n  annotate(\r\n    geom = \"curve\", x = 1932, y = 6412, xend = 1941, yend = 6417, \r\n    curvature = .3, arrow = arrow(length = unit(2, \"mm\"))\r\n  ) +\r\n  annotate(geom=\"text\", x = 1932, y = 6412, label=\"1941: Los Angeles DWP begins\\ndiverting water from Mono Lake\", size = 3, hjust = \"right\") +\r\n  # Annotation for 1978 Mono Lake Committee founded\r\n  annotate(geom=\"point\", x = 1978, y = 6375, size = 5, color = \"orange\", alpha = 0.5) +\r\n  annotate(\r\n    geom = \"curve\", x = 1965, y = 6380, xend = 1978, yend = 6375, \r\n    curvature = .3, arrow = arrow(length = unit(2, \"mm\"))\r\n  ) +\r\n  annotate(geom=\"text\", x = 1965, y = 6380, label=\"1978: Mono Lake Committee founded\", size = 3, hjust = \"right\") +\r\n  # Annotation for 1994 Decision 1631\r\n  annotate(geom=\"point\", x = 1994, y = 6374.6, size = 5, color = \"orange\", alpha = 0.5) +\r\n  annotate(\r\n    geom = \"curve\", x = 1995, y = 6389, xend = 1994, yend = 6374.6, \r\n    curvature = .3, arrow = arrow(length = unit(2, \"mm\"))\r\n  ) +\r\n  annotate(geom=\"text\", x = 1995, y = 6389, label=\"1994: Decision 1631 Issued,\\n mandating public trust\\n protections for Mono Lake\", size = 3, hjust = \"left\") +\r\n  # Horizontal line legend\r\n  scale_color_manual(\r\n    name = \"Significant Water Levels\",\r\n    values = c(\"blue\",\"red\"),\r\n    labels = c(\"Minimum level requirement\\nmandated by Decision 1631\\n\",\"Land bridge formation occurs creating\\naccess for predators of key species\")\r\n  ) +\r\n  # Axis labels\r\n  scale_x_continuous(breaks = seq(1850,2020, 10)) +\r\n  labs(\r\n    x = \"\\nYear\",\r\n    y = \"Lake Level (feet above sea level)\\n\"\r\n  ) +\r\n  # Theme and styles\r\n  theme_minimal() +\r\n  theme(\r\n    axis.title = element_text(face = \"bold\"),\r\n    legend.position = c(0.8,0.8),\r\n    legend.title = element_text(face = \"bold\"),\r\n    legend.background = element_rect(\r\n      fill=\"white\",\r\n      size=0.5, linetype=\"solid\", \r\n      colour =\"lightgrey\"\r\n    )\r\n  )\r\n\r\n\r\n\r\n\r\nFigure 1: Historical changes in water level of Mono Lake, Lee Vining, California (1850-2017)\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-03-06T17:40:11-08:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-03-06-plant-blr/",
    "title": "Binary Logistic Regression on Palmetto Plants",
    "description": "A short description of the post.",
    "author": [
      {
        "name": "Ian Brunjes",
        "url": {}
      }
    ],
    "date": "2021-03-06",
    "categories": [],
    "contents": "\r\nOverview\r\nIn this document, we will use binary logistic regression to infer a model for the probability of a plant in our dataset being Serenoa repens or Sabal etonia. Observations of these south-central Florida palmetto species include plant height, canopy length, canopy width, and green leaves, which are each provided in the data and subsequently used as predictor variables1.\r\nExploratory Data Visualization\r\n\r\n\r\nhide\r\n\r\n# Packages used\r\nlibrary(tidyverse)\r\nlibrary(here)\r\nlibrary(GGally)\r\nlibrary(broom)\r\nlibrary(jtools)\r\nlibrary(patchwork)\r\nlibrary(kableExtra)\r\n\r\n# Read in data from csv\r\npalmetto <- read_csv(here(\"data/palmetto.csv\"), col_types = cols(.default = \"c\"))\r\n\r\n# Refine data to desired subset and proper column types\r\npalmetto_target <- palmetto %>% select(species, height, length, width, green_lvs) %>% \r\n  mutate(height = as.numeric(height)) %>% \r\n  mutate(length = as.numeric(length)) %>% \r\n  mutate(width = as.numeric(width)) %>% \r\n  mutate(green_lvs = as.numeric(green_lvs)) %>% \r\n  mutate(species = case_when(\r\n    species == 1 ~ \"Serenoa repens\",\r\n    species == 2 ~ \"Sabal etonia\"\r\n  )) %>% \r\n  mutate(species = as.factor(species))\r\n\r\n# Visualization comparing plant attributes between species\r\nwidth_plot <- palmetto_target %>% drop_na() %>% \r\n  ggplot(aes(x = species, y = width, fill = species)) +\r\n  geom_boxplot() +\r\n  labs(x = \"\", y = \"\", title = \"Canopy Width (cm)\") +\r\n  scale_fill_manual(values = c(\"chartreuse3\", \"mediumaquamarine\"))\r\n\r\nlength_plot <- palmetto_target %>% drop_na() %>% \r\n  ggplot(aes(x = species, y = length, fill = species)) +\r\n  geom_boxplot() +\r\n  labs(x = \"\", y = \"\", title = \"Canopy Length (cm)\") +\r\n  scale_fill_manual(values = c(\"chartreuse3\", \"mediumaquamarine\"))\r\n\r\nheight_plot <- palmetto_target %>% drop_na() %>% \r\n  ggplot(aes(x = species, y = height, fill = species)) +\r\n  geom_boxplot() +\r\n  labs(x = \"\", y = \"\", title = \"Plant Height (cm)\") +\r\n  scale_fill_manual(values = c(\"chartreuse3\", \"mediumaquamarine\"))\r\n\r\n(width_plot + length_plot + height_plot) &\r\n  theme_grey() +\r\n  theme(legend.position = \"none\", axis.text = element_text(size = 8))\r\n\r\n\r\n\r\n\r\nFigure 1: Comparing the quartile distributions of canopy width, canopy length, and plant height (each in centimeters) of the two palmetto species Sabal etonia and Serenoa repens.\r\nCanopy width and plant height appear to be very similarly distributed between the species, and canopy length only slightly less so, indicating that these particular variables may be less significant than others for informing our logistic model.\r\n\r\n\r\nhide\r\n\r\n# Comparing number of green leaves between species\r\npalmetto_target %>% drop_na() %>%\r\n  ggplot(aes(x = species, y = green_lvs, color = species)) +\r\n  geom_jitter() +\r\n  scale_color_manual(values = c(\"chartreuse3\", \"mediumaquamarine\")) +\r\n  labs(y = \"Number of Green Leaves\\n\", x = \"\") +\r\n  theme_grey() +\r\n  theme(legend.position = \"none\")\r\n\r\n\r\n\r\n\r\nFigure 2: Comparing all observations of the number of green leaves recorded for each species.\r\nIn general, the number of green leaves counted for Serenoa repens specimens is higher than that of Sabal etonia; a contrast that could indicate that the number of green leaves become a heavily influencing factor in our model compared to other variables.\r\nBinomial Logistic Regression\r\n\r\n\r\nhide\r\n\r\n# levels(palmetto_target$species)\r\n# \"Sabal etonia\"   \"Serenoa repens\"\r\n# model will output odds of species being \"Serenoa repens\"\r\n\r\n# Perform Binary Logistic Regression for species odds\r\n# using variables: height, length, width, green_lvs\r\npalmetto_blr <- glm(species ~ height + length + width + green_lvs, data = palmetto_target, family = \"binomial\")\r\n\r\n# look at outcomes\r\n\r\n# summary(palmetto_blr)\r\nblr_table <- palmetto_blr %>% tidy() %>% \r\n  mutate(p.value = case_when(\r\n    p.value < 0.001 ~ \"< 0.001\"\r\n  ))\r\n\r\n# output formatted table\r\nblr_table %>%\r\n  kbl(caption = \"Table 1: Results of binary logistic regression for predicting species.\") %>%\r\n  kable_styling(bootstrap_options = \"striped\", full_width = T)\r\n\r\n\r\n\r\n\r\n\r\n\r\nhide\r\n\r\n# Apply model to determine fitted predictions for our data\r\nblr_fitted <- palmetto_blr %>% \r\n  augment(type.predict = \"response\")\r\n\r\n# Mutate to determine correctness of each fit based on 50% threshold         \r\nblr_prediction <- blr_fitted %>%\r\n  mutate(predicted = case_when(\r\n    .fitted >= 0.5 ~ \"Serenoa repens\",\r\n    .fitted < 0.5 ~ \"Sabal etonia\"\r\n  )) %>% \r\n  mutate(correct = case_when(\r\n    species == predicted ~ \"correct\",\r\n    species != predicted ~ \"incorrect\"\r\n  ))\r\n\r\n# Summarize correct/incorrect counts for each species into table\r\nspecies_model_correctness <- blr_prediction %>% \r\n  group_by(species, correct) %>% \r\n  summarize(count = n()) %>% \r\n  pivot_wider(names_from = correct, values_from = count) %>% \r\n  mutate(pct_correct = round((correct/(correct+incorrect) * 100), 2))\r\n\r\ncolnames(species_model_correctness) <- c(\"Species\", \"# of Correct Predictions\", \"# of Incorrect Predictions\", \"% Correctly Classified\")\r\n\r\nspecies_model_correctness %>%\r\n  kbl(caption = \"Table 2: Outcomes of plant predictions based on our model using a 50% cutoff for classification under either level.\") %>%\r\n  kable_styling(bootstrap_options = \"striped\", full_width = T)\r\n\r\n\r\n\r\n\r\nData Sources\r\n1Abrahamson, W.G. 2019. Survival, growth and biomass estimates of two dominant palmetto species of south-central Florida from 1981 - 2017, ongoing at 5-year intervals ver 1. Environmental Data Initiative. https://doi.org/10.6073/pasta/f2f96ec76fbbd4b9db431c79a770c4d5\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-03-06T17:30:19-08:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-03-06-qgis-spatial-modeling/",
    "title": "QGIS Spatial Modeling for Santa Barbara Wind Power",
    "description": "Using the QGIS graphical modeler to synthesize spatial data.",
    "author": [
      {
        "name": "Ian Brunjes",
        "url": {}
      }
    ],
    "date": "2021-03-06",
    "categories": [],
    "contents": "\r\nOverview\r\nSpatial data including information on wind speed, fire vulnerability, and proximity to roads, airports, public land, and urban development was used to infer regions of Santa Barbara County that would be suitable for hosting a wind power site based on criteria for these factors.\r\nThe model synthesizes these inputs to create a mask of suitable areas, whose size is calculated and ranked.\r\nModel\r\n\r\nResults\r\n\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-03-06T17:41:46-08:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-02-22-text-analysis-on-jrr-tolkiens-the-silmarillion/",
    "title": "Text Analysis on JRR Tolkien's The Silmarillion",
    "description": "Experimenting with text parsing packages and sentiment analysis.",
    "author": [
      {
        "name": "Ian Brunjes",
        "url": {}
      }
    ],
    "date": "2021-02-22",
    "categories": [],
    "contents": "\r\nOverview\r\n\r\n\r\nShow code\r\n\r\n# Libraries\r\n# --- General functionality\r\nlibrary(tidyverse)\r\nlibrary(here)\r\n# --- Text manipulation\r\nlibrary(tidytext)\r\nlibrary(pdftools)\r\nlibrary(textdata)\r\n# --- Building plots\r\nlibrary(ggwordcloud)\r\nlibrary(pacman)\r\nlibrary(grid)\r\nlibrary(viridis)\r\n\r\n\r\n\r\nThrough various text wrangling packages, we will break down common word usage and sentiments from JRR Tolkien’s The Silmarillion.\r\n\r\n“…if joyful is the fountain that rises in the sun, its springs are in the wells of sorrow unfathomed at the foundations of the Earth.”\r\n\r\nTolkien, J.R.R. The Silmarillion. New York: Houghton Mifflin Company, 2001. EPub. Internet Archive. Retrieved February 21, 2021, from https://archive.org/details/TheSimmarillon\r\nText wrangling and Analysis\r\n\r\n\r\nShow code\r\n\r\n# Read in source pdf\r\nsilmarillion_text <- pdf_text(here(\"data\", \"SilmarillionThe-J.R.R.TolkienChristopherTolkienTedNasmith.pdf\"))\r\n\r\n# Create data frame and begin to parse it down\r\nsilmarillion_tidy <- data.frame(silmarillion_text) %>% \r\n  mutate(text_full = str_split(silmarillion_text, pattern = \"\\\\n\")) %>% \r\n  unnest(text_full) %>% \r\n  mutate(text_full = str_trim(text_full))\r\n\r\n# Slice the relevant section of text (all chapters) and derive chapter numbers \r\nsilmarillion_df <- silmarillion_tidy %>% \r\n  slice(827:13101) %>%\r\n  mutate(chapter = case_when(\r\n    str_detect(text_full, pattern = \"Chapter\") ~ text_full,\r\n    TRUE ~ NA_character_\r\n  )) %>% \r\n  fill(chapter) %>% \r\n  separate(col = chapter, into = c(\"ch\", \"no\", sep = \" \")) %>% \r\n  mutate(chapter = as.numeric(no))\r\n\r\n# Final parse into individual tokens/words\r\nsilmarillion_tokens <- silmarillion_df %>% \r\n  unnest_tokens(word, text_full) %>% \r\n  dplyr::select(chapter, word)\r\n\r\n# Remove stop words\r\nsilmarillion_trimmed <- silmarillion_tokens %>% \r\n  anti_join(stop_words)\r\n\r\n# Since the source has poorly recognized special characters, some words have become fragmented in our token unnest\r\n# we can transform some of the more common ones back to their original\r\nclipped_words <- c(\"rin\", \"anor\", \"thien\", \"manw\", \"vatar\", \"rendil\", \"menor\")\r\ntransformed_words <- c(\"túrin\", \"fëanor\", \"lúthien\", \"manwë\", \"ilúvatar\", \"eärendil\", \"númenor\")\r\n\r\nsilmarillion_corrected <- silmarillion_trimmed %>% \r\n  mutate(word = case_when(\r\n    word %in% clipped_words ~ transformed_words[match(word, clipped_words)],\r\n    str_detect(word, \"ﬁ\") ~ str_replace(word, \"ﬁ\", \"fi\"),\r\n    str_detect(word, \"ﬂ\") ~ str_replace(word, \"ﬂ\", \"fl\"),\r\n    str_detect(word, \"ﬀ\") ~ str_replace(word, \"ﬀ\", \"ff\"),\r\n    TRUE ~ word\r\n  )) %>% \r\n  filter(word != \"il\") # another relic of weird parsing, its compliment gets replaced above\r\n\r\n# Calculate word counts and sort\r\nword_counts <- silmarillion_corrected %>% count(word) %>% arrange(desc(n))\r\n\r\n# Construction of Barad-dûr\r\ntower <- jpeg::readJPEG(here(\"data\", \"tower2.jpg\"))\r\nword_counts %>% \r\n  slice(1:100) %>% \r\n  ggplot(aes(label=word)) +\r\n  annotation_custom(rasterGrob(tower, \r\n                               width = unit(1,\"npc\"), \r\n                               height = unit(1,\"npc\")), \r\n                               -Inf, Inf, -Inf, Inf) +\r\n  geom_text_wordcloud(aes(color = n, size = n)) +\r\n  scale_size_area(max_size = 7) +\r\n  scale_color_viridis(option = \"inferno\", direction = -1)\r\n\r\n\r\n\r\n\r\nFigure 1: Word cloud of the one hundred most frequently occurring words throughout all chapters of The Silmarillion.\r\n\r\n\r\nShow code\r\n\r\n# Sentiment analysis with afinn lexicon\r\nsilmarillion_afinn <- silmarillion_corrected %>% \r\n  inner_join(get_sentiments(\"afinn\"))\r\n\r\n# Calculate mean afinn value per chapter\r\nafinn_means <- silmarillion_afinn %>% \r\n  group_by(chapter) %>% \r\n  summarise(mean_afinn = mean(value))\r\n\r\n# Build plot\r\nggplot(data = afinn_means, aes(x = chapter, y = mean_afinn, fill = mean_afinn)) +\r\n  geom_col() +\r\n  coord_flip() +\r\n  theme_minimal() +\r\n  scale_fill_gradient2(low = \"darkred\", mid = \"white\", high = \"forestgreen\") +\r\n  scale_x_continuous(trans = \"reverse\") +\r\n  theme(legend.position = \"none\") +\r\n  labs(x = \"Chapter\", y = \"Average Afinn Sentiment Score\")\r\n\r\n\r\n\r\n\r\nFigure 2: Sentiment analysis giving a per chapter score of The Silmarillion using the AFINN sentiment lexicon.\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-03-06T17:29:22-08:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-02-09-new-blog-who-dis/",
    "title": "New blog, who dis?",
    "description": "Wow, such blog.",
    "author": [
      {
        "name": "Ian Brunjes",
        "url": {}
      }
    ],
    "date": "2021-02-09",
    "categories": [],
    "contents": "\r\nDistill is a publication format for scientific and technical writing, native to the web.\r\nLearn more about using Distill at https://rstudio.github.io/distill.\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-02-22T20:50:44-08:00",
    "input_file": {}
  }
]
