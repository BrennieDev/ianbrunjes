[
  {
    "path": "posts/2021-02-22-text-analysis-on-jrr-tolkiens-the-silmarillion/",
    "title": "Text Analysis on JRR Tolkien's The Silmarillion",
    "description": "Experimenting with text parsing packages and sentiment analysis.",
    "author": [
      {
        "name": "Ian Brunjes",
        "url": {}
      }
    ],
    "date": "2021-02-22",
    "categories": [],
    "contents": "\r\nOverview\r\n\r\n\r\nShow code\r\n\r\n# Libraries\r\n# --- General functionality\r\nlibrary(tidyverse)\r\nlibrary(here)\r\n# --- Text manipulation\r\nlibrary(tidytext)\r\nlibrary(pdftools)\r\nlibrary(textdata)\r\n# --- Building plots\r\nlibrary(ggwordcloud)\r\nlibrary(pacman)\r\nlibrary(grid)\r\nlibrary(viridis)\r\n\r\n\r\n\r\nThrough various text wrangling packages, we will break down common word usage and sentiments from JRR Tolkien’s The Silmarillion.\r\n\r\n“…if joyful is the fountain that rises in the sun, its springs are in the wells of sorrow unfathomed at the foundations of the Earth.”\r\n\r\nTolkien, J.R.R. The Silmarillion. New York: Houghton Mifflin Company, 2001. EPub. Internet Archive. Retrieved February 21, 2021, from https://archive.org/details/TheSimmarillon\r\nText wrangling and Analysis\r\n\r\n\r\nShow code\r\n\r\n# Read in source pdf\r\nsilmarillion_text <- pdf_text(here(\"data\", \"SilmarillionThe-J.R.R.TolkienChristopherTolkienTedNasmith.pdf\"))\r\n\r\n# Create data frame and begin to parse it down\r\nsilmarillion_tidy <- data.frame(silmarillion_text) %>% \r\n  mutate(text_full = str_split(silmarillion_text, pattern = \"\\\\n\")) %>% \r\n  unnest(text_full) %>% \r\n  mutate(text_full = str_trim(text_full))\r\n\r\n# Slice the relevant section of text (all chapters) and derive chapter numbers \r\nsilmarillion_df <- silmarillion_tidy %>% \r\n  slice(827:13101) %>%\r\n  mutate(chapter = case_when(\r\n    str_detect(text_full, pattern = \"Chapter\") ~ text_full,\r\n    TRUE ~ NA_character_\r\n  )) %>% \r\n  fill(chapter) %>% \r\n  separate(col = chapter, into = c(\"ch\", \"no\", sep = \" \")) %>% \r\n  mutate(chapter = as.numeric(no))\r\n\r\n# Final parse into individual tokens/words\r\nsilmarillion_tokens <- silmarillion_df %>% \r\n  unnest_tokens(word, text_full) %>% \r\n  dplyr::select(chapter, word)\r\n\r\n# Remove stop words\r\nsilmarillion_trimmed <- silmarillion_tokens %>% \r\n  anti_join(stop_words)\r\n\r\n# Since the source has poorly recognized special characters, some words have become fragmented in our token unnest\r\n# we can transform some of the more common ones back to their original\r\nclipped_words <- c(\"rin\", \"anor\", \"thien\", \"manw\", \"vatar\", \"rendil\", \"menor\")\r\ntransformed_words <- c(\"túrin\", \"fëanor\", \"lúthien\", \"manwë\", \"ilúvatar\", \"eärendil\", \"númenor\")\r\n\r\nsilmarillion_corrected <- silmarillion_trimmed %>% \r\n  mutate(word = case_when(\r\n    word %in% clipped_words ~ transformed_words[match(word, clipped_words)],\r\n    str_detect(word, \"ﬁ\") ~ str_replace(word, \"ﬁ\", \"fi\"),\r\n    str_detect(word, \"ﬂ\") ~ str_replace(word, \"ﬂ\", \"fl\"),\r\n    str_detect(word, \"ﬀ\") ~ str_replace(word, \"ﬀ\", \"ff\"),\r\n    TRUE ~ word\r\n  )) %>% \r\n  filter(word != \"il\") # another relic of weird parsing, its compliment gets replaced above\r\n\r\n# Calculate word counts and sort\r\nword_counts <- silmarillion_corrected %>% count(word) %>% arrange(desc(n))\r\n\r\n# Construction of Barad-dûr\r\ntower <- jpeg::readJPEG(here(\"data\", \"tower2.jpg\"))\r\nword_counts %>% \r\n  slice(1:100) %>% \r\n  ggplot(aes(label=word)) +\r\n  annotation_custom(rasterGrob(tower, \r\n                               width = unit(1,\"npc\"), \r\n                               height = unit(1,\"npc\")), \r\n                               -Inf, Inf, -Inf, Inf) +\r\n  geom_text_wordcloud(aes(color = n, size = n)) +\r\n  scale_size_area(max_size = 7) +\r\n  scale_color_viridis(option = \"inferno\", direction = -1)\r\n\r\n\r\n\r\n\r\nFigure 1: Word cloud of the one hundred most frequently occurring words throughout all chapters of The Silmarillion.\r\n\r\n\r\nShow code\r\n\r\n# Sentiment analysis with afinn lexicon\r\nsilmarillion_afinn <- silmarillion_corrected %>% \r\n  inner_join(get_sentiments(\"afinn\"))\r\n\r\n# Calculate mean afinn value per chapter\r\nafinn_means <- silmarillion_afinn %>% \r\n  group_by(chapter) %>% \r\n  summarise(mean_afinn = mean(value))\r\n\r\n# Build plot\r\nggplot(data = afinn_means, aes(x = chapter, y = mean_afinn, fill = mean_afinn)) +\r\n  geom_col() +\r\n  coord_flip() +\r\n  theme_minimal() +\r\n  scale_fill_gradient2(low = \"darkred\", mid = \"white\", high = \"forestgreen\") +\r\n  scale_x_continuous(trans = \"reverse\") +\r\n  theme(legend.position = \"none\") +\r\n  labs(x = \"Chapter\", y = \"Average Afinn Sentiment Score\")\r\n\r\n\r\n\r\n\r\nFigure 2: Sentiment analysis giving a per chapter score of The Silmarillion using the AFINN sentiment lexicon.\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-02-22T23:02:54-08:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-02-09-new-blog-who-dis/",
    "title": "New blog, who dis?",
    "description": "Wow, such blog.",
    "author": [
      {
        "name": "Ian Brunjes",
        "url": {}
      }
    ],
    "date": "2021-02-09",
    "categories": [],
    "contents": "\r\nDistill is a publication format for scientific and technical writing, native to the web.\r\nLearn more about using Distill at https://rstudio.github.io/distill.\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-02-22T20:50:44-08:00",
    "input_file": {}
  }
]
